#!/usr/bin/python2

############################################
# Imports
############################################
import logging
import argparse
import subprocess as sp
import os, sys
import json
import gtk, glib
import urlparse, urllib

#import threading
#import time
#import json
#import gtk, glib
#import signal


############################################
# Logging
############################################

# log = logging.getLogger(__name__)
log = logging.getLogger()

def _init_log():
    FORMAT = '%(module)s %(funcName)s:%(lineno)d %(message)s'
    # logging.basicConfig(format=FORMAT)
    log.setLevel(logging.INFO)
    # log.setLevel(logging.DEBUG)
    h = logging.StreamHandler()
    # f = MyFormatter()
    f = logging.Formatter(FORMAT)
    h.setFormatter(f)
    log.addHandler(h)

_init_log()

############################################
# Argument parsing
############################################

desc = '''Wallpaper configurator'''
p = argparse.ArgumentParser(description=desc)
p.add_argument("--debug", help="debug mode", action="store_true")
p.add_argument("--scale", help="scale type: fit, cover or none (default %(default)s)",
    choices=['fit', 'cover', 'none'], default='cover')
p.add_argument("--color", help="fill color, name or '#RRGGBB' value (default %(default)s)",
    default='#ffd2ac')
p.add_argument("--saved", help="apply saved configuration (if any) and exit",
    action='store_true')

p.add_argument("image", help="image", nargs='?')


args = p.parse_args()
if args.debug:
    log.setLevel(logging.DEBUG)

log.debug("Args: %s", args)

############################################
# Misc
############################################
def die(msg, ret = 1):
    print >> sys.stderr, msg
    exit(ret)

############################################
# Thumbnail Image
############################################

class ThImage(gtk.Image):
    def __init__(self):
        gtk.Image.__init__(self)
        self.connect("expose_event", self._expose)
        self.pix = None
        self.ipix = None
        self.color = None
        self.uri = None
        self.idle_id = None
        self.scale = 'cover'
        self.gravity = 'center'
        self.set_color("#ffd2ac")

        
    def set_pix(self, uri):
        log.debug("uri %s", uri)
        self.uri = None
        self.ipix = None
        self._update_pix()
        
        if not uri:
            return None
        
        if uri.startswith('file://'):
            uri = urllib.url2pathname(uri[7:])
        elif uri[0] == '/':
            pass
        else:
            log.warning("not a path %s", uri)
            return None
      
        try:
            self.ipix = gtk.gdk.pixbuf_new_from_file(uri)
            self.uri = uri
            return uri
        except:
            return None


    def set_color(self, color):
        log.debug("color %s", color)
        self.color = str(color)
        self.rgba = self._color_to_rgba(self.color)
        self._update_pix()
        

    def set_scale(self, scale):
        log.debug("scale %s", scale)
        if not scale in ['fit', 'cover']:
            log.warning("unsupported scale %s", scale)
            return
        self.scale = scale
        self._update_pix()


    def get_conf(self):
        c = {
            'scale': self.scale,
            'color': self.color,
            'image': self.uri,
        }
        return c
    
    def _expose(self, widget, event):
        a = event.area
        log.debug("ev %s, pix %s", a, self.pix)
        if not self.pix:
            self._update_pix()
        else:
            self.window.draw_pixbuf(self.style.black_gc, self.pix, 0, 0, a.x, a.y)


    def _size_alloc(self, widget, a):
        log.debug("%s, ratio %f", a, float(a.width) / a.height)
        self.pix = None
        self._update_pix()


    def _update_pix(self):
        log.debug("idle %s", self.idle_id)
        if self.idle_id:
            return
        self.idle_id = glib.idle_add(self._update_pix_real)


    def _color_to_rgba(self, color):
        c = gtk.gdk.color_parse(color)
        rgba = ((c.red >> 8) << 24) | ((c.green >> 8) << 16) | ((c.blue >> 8) << 8)
        # rgba = 0xffd2ac00
        log.debug("rgba %x", rgba)
        return rgba


    def _compose_ipix(self):
        log.debug("")
        wbg = self.pix.get_width()
        hbg = self.pix.get_height()
        wpx = self.ipix.get_width()
        hpx = self.ipix.get_height()
        if self.scale == 'cover':
            scale_r = max(float(wbg) / wpx, float(hbg) / hpx)
        elif self.scale == 'fit':
            scale_r = min(float(wbg) / wpx, float(hbg) / hpx)
        else:
            scale_r = 1.0
        log.debug("scale %s, %.2f", self.scale, scale_r)
        dest_width  = wpx * scale_r
        dest_height = hpx * scale_r
        dest_x = 0
        dest_y = 0
        offset_x = 0.0
        offset_y = 0.0

        if self.gravity == 'center':
            offset_x = (wbg - dest_width) / 2
            offset_y = (hbg - dest_height) / 2

            if offset_x > 0:
                dest_x = offset_x
            if offset_y > 0:
                dest_y = offset_y

        log.debug("offset %+d%+d", int(offset_x), int(offset_y))
        if dest_width > wbg:
            dest_width = wbg
        if dest_height > hbg:
            dest_height = hbg
        log.debug("dest geom=%dx%d pos=%dx%d",
            dest_width, dest_height, dest_x, dest_y)
     
        dest_x = int(dest_x)
        dest_y = int(dest_y)
        dest_width = int(dest_width)
        dest_height = int(dest_height)
        offset_x = int(offset_x)
        offset_y = int(offset_y)
        self.ipix.composite(self.pix,
            dest_x, dest_y, dest_width, dest_height,
            offset_x, offset_y, scale_r, scale_r,
            gtk.gdk.INTERP_HYPER, 255)


    def _update_pix_real(self):
        a = self.get_allocation()
        log.debug("a %s", a)
        self.pix = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, False,
            8, a.width, a.height)
        self.pix.fill(self.rgba)
        if self.ipix:
            self._compose_ipix()
        self.queue_draw()
        self.idle_id = None
        return False

############################################
# GUI
############################################

gui = {}

def gui_exit_cb(x=None, y=None):
    exit(0)



    
def gui_draged_cb(widget, drag_context, x, y, selection, info, time):
    uri = selection.data.split()[0]
    uri = gui['th'].set_pix(uri)
    log.debug("set to %s", uri)
    gui['image'].unselect_all()
    if uri:
        gui['image'].set_filename(uri)
    

def gui_file_set_cb(btn):
    path = btn.get_filename()
    log.debug("path %s", path)
    uri = gui['th'].set_pix(path)
    log.debug("set to %s", uri)
    gui['image'].unselect_all()
    if uri:
        gui['image'].set_filename(uri)
            

    
def gui_file_unset_cb(cbtn, btn):
    log.debug("")
    btn.unselect_all()
    gui['th'].set_pix(None)
    
    
def gui_file_btn():
    hbox = gtk.HBox(False, 3)

    label = gtk.Label("Image")
    hbox.pack_start(label, False)

    btn = gtk.FileChooserButton('Select a File')
    gui['image'] = btn
    hbox.pack_start(btn, False)
    btn.connect("file-set", gui_file_set_cb)
    btn.set_width_chars(20)
    if args.image:
        btn.set_filename(args.image)
        gui_file_set_cb(btn)

    f = gtk.FileFilter()
    f.set_name("Images")
    f.add_pixbuf_formats()
    btn.add_filter(f)
  
    f = gtk.FileFilter()
    f.set_name("All files")
    f.add_pattern("*")
    btn.add_filter(f)

    cbtn = gtk.Button()
    hbox.pack_start(cbtn, False)
    cbtn.connect("clicked", gui_file_unset_cb, btn)
    img = gtk.Image()
    cbtn.add(img)
    img.set_from_stock(gtk.STOCK_CLEAR, gtk.ICON_SIZE_MENU)
    
    hbox.show_all()
    return hbox


def gui_scale_set_cb(cb):
    model = cb.get_model()
    index = cb.get_active()
    scale = model[index][1]
    log.debug("scale set %s", scale)
    gui['th'].set_scale(scale)
    

def gui_scale_btn():
    hbox = gtk.HBox(False, 3)

    label = gtk.Label("Scale")
    hbox.pack_start(label, False)

    scales = ['fit', 'cover']
    liststore = gtk.ListStore(str, str)
    for s in scales:
        liststore.append([s.title(), s])

    combobox = gtk.ComboBox(liststore)
    gui['scale'] = combobox
    hbox.pack_start(combobox, False)
    try:
        ae = scales.index(args.scale)
    except:
        ae = 0
    combobox.set_active(ae)
    gui_scale_set_cb(combobox)
    
    cell = gtk.CellRendererText()
    combobox.pack_start(cell, True)
    combobox.add_attribute(cell, 'text', 0)
    combobox.connect('changed', gui_scale_set_cb)
    
    hbox.show_all()
    return hbox


def gui_color_set_cb(btn):
    c = btn.get_color()
    log.debug("set color %s", c)
    gui['th'].set_color(c)
    

def gui_color_btn():
    hbox = gtk.HBox(False, 3)

    label = gtk.Label("Color")
    hbox.pack_start(label, False)
    
    c = gtk.gdk.color_parse(args.color)
    btn = gtk.ColorButton(c)
    gui['color'] = btn
    hbox.pack_start(btn, False)
    btn.connect("color-set", gui_color_set_cb)
    gui['th'].set_color(c)
    
    hbox.show_all()
    return hbox




def gui_run():
    w = gtk.Dialog("Set Wallpaper", None, 0,
            (gtk.STOCK_CANCEL, gtk.RESPONSE_REJECT,
             gtk.STOCK_OK, gtk.RESPONSE_ACCEPT))
    # w.get_action_area().set_layout(gtk.BUTTONBOX_CENTER)
    w.set_border_width(10)
    w.set_icon_name("background")
    w.set_default_size(650, 480)
    w.set_position(gtk.WIN_POS_CENTER)
    w.connect("delete-event", gui_exit_cb)
    w.connect("destroy", gui_exit_cb)
    # vbox = gtk.VBox(False, 4)
    # w.add(vbox)

    sratio = gtk.gdk.screen_width() / float(gtk.gdk.screen_height())
    frame = gtk.AspectFrame(ratio = sratio, obey_child = False)
    w.vbox.pack_start(frame, True, True, 0)
    frame.set_shadow_type(gtk.SHADOW_IN)
    frame.set_border_width(10)

    frame2 = gtk.AspectFrame(ratio = sratio, obey_child = False)
    frame.add(frame2)
    frame2.set_shadow_type(gtk.SHADOW_NONE)
    frame2.set_border_width(30)

    th = ThImage()
    gui['th'] = th
    th.drag_dest_set(gtk.DEST_DEFAULT_ALL,
            [("text/uri-list", 0, 11)],
            gtk.gdk.ACTION_COPY)
    th.connect("drag_data_received", gui_draged_cb)
    frame2.add(th)

    ali = gtk.Alignment(0.5, 0.5, 0, 0)
    w.vbox.pack_start(ali, False, True, 0)

    vbox = gtk.VBox(False, 3)
    ali.add(vbox)

    vbox.pack_start(gui_file_btn(), False, True, 0)
    vbox.pack_start(gui_scale_btn(), False, True, 0)
    vbox.pack_start(gui_color_btn(), False, True, 0)
 

    w.vbox.show_all()
    return w
   

############################################
# Main
############################################
conf_path = os.path.expanduser('~/.config/wallpaper')

def conf_load():
    try:
        c = json.loads(open(conf_path, 'r').read())
    except:
        c = {}
    log.debug("load conf %s", c)
    return c


def conf_save(c):
    log.debug("save conf %s", c)
    open(conf_path, 'w').write(json.dumps(c))


def conf_run(c):
    cmd = ['wallpaper']
    cmd += ['--scale=' + c['scale']]
    cmd += ['--color=' + c['color']]
    if c['image']:
        cmd += [c['image']]
    log.debug("cmd %s", cmd)
    return sp.call(cmd)


def args_load():
    c = conf_load()
    for k in c:
        setattr(args, k, c[k])
    log.debug("loaded args %s", args)


if __name__ == '__main__':
    log.debug("args %s", sys.argv)
    conf_dir = os.path.dirname(conf_path)
    if not os.path.exists(conf_dir):
        os.makedirs(conf_dir)
        
    if args.saved:
        c = conf_load()
        rc = conf_run(c)
        exit(rc)
    
    # when run without args, show preview of prev command
    if len(sys.argv) == 1 or (len(sys.argv) == 2 and args.debug):
        args_load()
  
    w = gui_run()
    rc = w.run()
    if rc == gtk.RESPONSE_ACCEPT:
        c = gui['th'].get_conf()
        log.debug("conf %s", c)
        conf_save(c)
        rc = conf_run(c)
        exit(rc)
        
    w.destroy()




